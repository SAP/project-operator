/*
SPDX-FileCopyrightText: 2025 SAP SE or an SAP affiliate company and project-operator contributors
SPDX-License-Identifier: Apache-2.0
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"

	corecssapcomv1alpha1 "github.com/sap/project-operator/api/v1alpha1"
	scheme "github.com/sap/project-operator/pkg/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	gentype "k8s.io/client-go/gentype"
)

// ProjectsGetter has a method to return a ProjectInterface.
// A group's client should implement this interface.
type ProjectsGetter interface {
	Projects(namespace string) ProjectInterface
}

// ProjectInterface has methods to work with Project resources.
type ProjectInterface interface {
	Create(ctx context.Context, project *corecssapcomv1alpha1.Project, opts v1.CreateOptions) (*corecssapcomv1alpha1.Project, error)
	Update(ctx context.Context, project *corecssapcomv1alpha1.Project, opts v1.UpdateOptions) (*corecssapcomv1alpha1.Project, error)
	// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
	UpdateStatus(ctx context.Context, project *corecssapcomv1alpha1.Project, opts v1.UpdateOptions) (*corecssapcomv1alpha1.Project, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*corecssapcomv1alpha1.Project, error)
	List(ctx context.Context, opts v1.ListOptions) (*corecssapcomv1alpha1.ProjectList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *corecssapcomv1alpha1.Project, err error)
	ProjectExpansion
}

// projects implements ProjectInterface
type projects struct {
	*gentype.ClientWithList[*corecssapcomv1alpha1.Project, *corecssapcomv1alpha1.ProjectList]
}

// newProjects returns a Projects
func newProjects(c *CoreV1alpha1Client, namespace string) *projects {
	return &projects{
		gentype.NewClientWithList[*corecssapcomv1alpha1.Project, *corecssapcomv1alpha1.ProjectList](
			"projects",
			c.RESTClient(),
			scheme.ParameterCodec,
			namespace,
			func() *corecssapcomv1alpha1.Project { return &corecssapcomv1alpha1.Project{} },
			func() *corecssapcomv1alpha1.ProjectList { return &corecssapcomv1alpha1.ProjectList{} },
		),
	}
}
